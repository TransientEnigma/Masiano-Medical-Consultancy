using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace JMConsultantsDB
{
    public partial class frmGPDataEntry : Form
    {
        public frmGPDataEntry()
        {
            InitializeComponent();
        }

        private void p2430705_tblGPBindingNavigatorSaveItem_Click(object sender, EventArgs e)
        {
            this.Validate();
            this.p2430705_tblGPBindingSource.EndEdit();
            this.tableAdapterManager.UpdateAll(this.masianoJanzebConsultantsDataSet);

        }

        private void p2430705_tblGPBindingNavigatorSaveItem_Click_1(object sender, EventArgs e)
        {
            this.Validate();
            this.p2430705_tblGPBindingSource.EndEdit();
            this.tableAdapterManager.UpdateAll(this.masianoJanzebConsultantsDataSet);

        }

        private void frmGPDataEntry_Load(object sender, EventArgs e)
        {
            // TODO: This line of code loads data into the 'masianoJanzebConsultantsDataSet.P2430705_tblMedicalCentre' table. You can move, or remove it, as needed.
            this.p2430705_tblMedicalCentreTableAdapter.Fill(this.masianoJanzebConsultantsDataSet.P2430705_tblMedicalCentre);
            // TODO: This line of code loads data into the 'masianoJanzebConsultantsDataSet.P2430705_tblPracticeGP' table. You can move, or remove it, as needed.
            this.p2430705_tblPracticeGPTableAdapter.Fill(this.masianoJanzebConsultantsDataSet.P2430705_tblPracticeGP);
            // TODO: This line of code loads data into the 'masianoJanzebConsultantsDataSet.P2430705_tblGP' table. You can move, or remove it, as needed.
            this.p2430705_tblGPTableAdapter.Fill(this.masianoJanzebConsultantsDataSet.P2430705_tblGP);
            //disable the following textboxes. No data is entered here, its for display purposes only

            //calling the event handler will calculate the total days in the week for the table
            //p2430705_tblPracticeGPDataGridView_CellValueChanged(null, null);

            txtMedSchoolName.Enabled = false;
            txtUniversity.Enabled = false;
            txtAward.Enabled = false;

        }

        public void AddNewGP()
        {
            //public add method
            //set the form to data entry mode
            p2430705_tblGPBindingSource.AddNew();
            //get an availabel GPNo to use and assign it to the GPNo TextBox
            txtGPNo.Text = Convert.ToString(GetNextGPNo());
            //Call the DisplayMedSchoolDetails() function to clear the textboxes
            DisplayMedSchoolDetails();
            //the GPNo will be autogenerated so no need to enter one, this is why the txtGPNo box is not enabled
            txtGPNo.Enabled = false;
            

        }

        public void FindGP(Int32 GPNo)
        {
            //clear any the textboxes so nothing is displayed if no data is found
            txtMedSchoolName.Text = "";
            txtUniversity.Text = "";
            txtAward.Text = "";
            //public procedure that shows the details of the GP ( based on GPNo passed to it)
            //Filter the data on tpassed as a parameter
            p2430705_tblGPBindingSource.Filter = "JM_GPNo = " + Convert.ToString(GPNo);
            // the primary key  doesnt need to be edited when edit button on GP list form is selected
            //btnSelectGPFromList.Enabled = false;
            //also same for GPNumber
            txtGPNo.Enabled = false;

        }



        private Int32 GetNextGPNo()
        {
            //find the next available GP no
            using (var dtContext = new JMConsultantsDataContext())
            {
                Int32 previousGPNo = 0; //assume the numbers start at 1
                Int32 currentGPNo;
                //using stored procedure via LINQ assuming the GP number in database are ordered 
                var GPNumbers = dtContext.sproc_tblGP_Get_GP_numbers();
                foreach (var GPNumberIndexed in GPNumbers) //Note 1/2 to self: analogous to GPNumberIndexed[Index] = GPNumbers is the result
                {
                    currentGPNo = Convert.ToInt32(GPNumberIndexed.JM_GPNo);//Note 2/2  to self: analogous to array GPNumberIndexed[Index].JM_GPNo
                    //Find the difference;
                    var difference = currentGPNo - previousGPNo;
                    //if the difference is greater than one then there is a gap for a GPNo
                    if (difference > 1) break;
                    previousGPNo = currentGPNo;
                }
                return previousGPNo + 1;
            }
        }

        private Int32 GetNextPracticeGPNo()
        {
            //find the next available GP no
            using (var dtContext = new JMConsultantsDataContext())
            {

                Int32 maxPracticeGPNo =0;
                //using stored procedure via LINQ assuming the GP number in database are ordered 
                var PracticeGPNumbers = dtContext.sproc_tblPracticeGP_Get_HighesPracticeGPNo();
                foreach (var PracticeGPNumberIndexed in PracticeGPNumbers) //Note 1/2 to self: analogous to GPNumberIndexed[Index] = GPNumbers is the result
                {
                    maxPracticeGPNo = Convert.ToInt32(PracticeGPNumberIndexed.maxJM_PracticeGPNo);//Note 2/2  to self: analogous to array GPNumberIndexed[Index].JM_GPNo

                }
                return maxPracticeGPNo + 1;
            }
        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            //close the form
            this.Close();
        }

        private void btnOK_Click(object sender, EventArgs e)
        {
            //end the editing
            this.p2430705_tblGPBindingSource.EndEdit();
            this.p2430705_tblPracticeGPBindingSource.EndEdit();
            //update the data to the data base using the Data Table adapter
            this.tableAdapterManager.UpdateAll(this.masianoJanzebConsultantsDataSet);
        }

        private void p2430705_tblPracticeGPDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        //This code was experimental code and no longer required
        //private void btnFindGP_Click(object sender, EventArgs e)
        //{
        //    //try this get the number from the box when button clicked
        //    try
        //    {
        //        //convert the number from text to an int
        //        Int32 NumInBox = Convert.ToInt32(txtGPNo.Text);
        //        //Call FindGP function to find GP based on number in box
        //        FindGP(NumInBox);
        //        //after finding the details for the GP, update the form with the Med school details
        //        //call the procedure DisplayMedSchoolDetails procedure to fill the med school details texboxes
        //        DisplayMedSchoolDetails();
        //    }
        //    catch
        //    {
        //        //encase no number is entered do nothing when clicked
        //    }
        //}

        private void jM_MedicalSchoolCodeTextBox_TextChanged(object sender, EventArgs e)
        {

            //call the procedure DisplayMedSchoolDetails procedure to fill the med school details texboxes
            DisplayMedSchoolDetails();
        }
        private void DisplayMedSchoolDetails()
        {


            string MedicalSchoolCode = txtMedicalSchoolCode.Text;

            //LINQ code to get the name, university and award of the medical school

            using (var dtContext = new JMConsultantsDataContext())

            {
                //Put the results of stored procedure into a variable
                var MedSchoolDetails = dtContext.sproc_GetMedicalSchoolDetails(MedicalSchoolCode);

                //use a foreach loop to index the the details in the variable array
                foreach (var DetailsIndexed in MedSchoolDetails)
                {
                    //get the School name and pass the name to the School name text box
                    txtMedSchoolName.Text = Convert.ToString(DetailsIndexed.JM_Name);

                    //get the University and pass it to the text University textbox
                    txtUniversity.Text = Convert.ToString(DetailsIndexed.JM_University);

                    //get the Award and pass it to the Award textbox
                    txtAward.Text = Convert.ToString(DetailsIndexed.JM_Award);
                }
            }
        }

        private void txtGPNo_TextChanged(object sender, EventArgs e)
        {
            //clear the text boxes first
            ClearBoxes();
            //display the GPname and Med school details for the GPNo typed (also clears text boxes)
            DisplayGPDetails();

        }

        private void DisplayGPDetails()
        {
            //first try to execute the code. 
            try
            {


                //declare an Integer to store the GP Number
                Int32 GPNumberIn = Convert.ToInt32(txtGPNo.Text);

                //LINQ code to get the name, medical school code for the GP
                using (var dtContext = new JMConsultantsDataContext())

                {
                    //Put the results of stored procedure into a variable
                    var GPDetails = dtContext.sproc_tblGP_Get_GPName_and_MedSchool(GPNumberIn);

                    //use a foreach loop to index the the details in the variable array
                    foreach (var DetailsIndexed in GPDetails)
                    {
                        //get the GP name and pass it to the GP name text box
                        txtGPName.Text = Convert.ToString(DetailsIndexed.JM_Name);

                        //get the Medical School number and pass it to the medical school box
                        txtMedicalSchoolCode.Text = Convert.ToString(DetailsIndexed.JM_MedicalSchoolCode);

                    }
                }
            }
            catch
            {
                //in case of error do nothing
            }

        }

        private void ClearBoxes()
        {
            //clear the textboxes in case of search data from previous search
            txtMedicalSchoolCode.Text = "";
            txtMedSchoolName.Text = "";
            txtUniversity.Text = "";
            txtAward.Text = "";
            //clear the textboxes, encase of data from previous search
            txtGPName.Text = "";
            txtUniversity.Text = "";
        }

        private void btnSelectGPFromList_Click(object sender, EventArgs e)
        {
            //create an instance of the frmGPsList called GPListForm
            frmGPList GPListForm = new frmGPList();
            //make the MDI parent of the form be this MDI parent form
            GPListForm.MdiParent = this.MdiParent;
            //(Note:concept of delegates (an event handler is a delegate) means we can
            //pass the method getGPSelectedFromList to the  GPListForm object. Because they both have the same signature
            //the getGPSelected method can call that method
            GPListForm.GPSelectedFromList += new EventHandler(getGPSelectedFromList);
            //display the GPListForm
            GPListForm.Show();
        }

        //this function handles the event from the GP List form.
        //It fetches the GP number and puts it in the GP No text box on this form
        private void getGPSelectedFromList(object sender, EventArgs e)
        {
            //When the Child GPs List form has a GP selected this will get the GP number.

            //Declare a string variable to store the GPNumberSelected
            string GPNumberSelected;
            //We need an instance of the frmGPList that will be used to send us the information we need
            frmGPList GPListChildForm = sender as frmGPList;
            //if GPListChildForm is not empty i.e. list is populated
            if (GPListChildForm != null)
            {

                //get the GP number from the GP list using the getGPNumber() function
                GPNumberSelected = GPListChildForm.getGPNumber();
                //put the Selected GP number in the textbox on this form
                this.txtGPNo.Text = GPNumberSelected;
            }
        }

        private void btnSelectfromMedList_Click(object sender, EventArgs e)
        {
            //create an instance of the frmMedicalSchoolList 
            frmMedicalSchoolList MedicalSchoolListForm = new frmMedicalSchoolList();
            //make the MDI parent of the form be this MDI parent form
            MedicalSchoolListForm.MdiParent = this.MdiParent;
            //(Note:concept of delegates (an event handler is a delegate) means we can
            //pass the method getMedicalSchoolSelectedFromList to the  MedicalSchoolListForm object. Because they both have the same signature
            //the getGPSelected method can call that method
            MedicalSchoolListForm.MedicalSchoolSelectedFromList += new EventHandler(getMedicalSchoolSelectedFromList);
            //display the MedicalSchoolListForm
            MedicalSchoolListForm.Show();
        }

        private void getMedicalSchoolSelectedFromList(object sender, EventArgs e)
        {
            //When the Child MedicalSchools List form has a MedicalSchool selected this will get the MedicalSchool number.

            //Declare a string variable to store the MedicalSchoolNumberSelected
            string MedicalSchoolNumberSelected;
            //We need an instance of the frmGPList that will be used to send us the information we need
            frmMedicalSchoolList MedicalSchoolListChildForm = sender as frmMedicalSchoolList;
            //if MedicalSchoolListChildForm is not empty i.e. list is populated
            if (MedicalSchoolListChildForm != null)
            {

                //get the MedicalSchool number from the MedicalSchool list using the getMedicalSchoolNumber() function
                MedicalSchoolNumberSelected = MedicalSchoolListChildForm.getMedicalSchoolNumber();
                //put the Selected GP number in the textbox on this form
                this.txtMedicalSchoolCode.Text = MedicalSchoolNumberSelected;
            }
        }

        private void p2430705_tblPracticeGPDataGridView_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            //if a row has been clicked on
            if (e.RowIndex != -1)
            {
                //add the GPNo to subform row
                p2430705_tblPracticeGPDataGridView.Rows[e.RowIndex].Cells["dataGridViewTextBoxColumn2"].Value = this.txtGPNo.Text;
                //add the GPNo to subform row
                p2430705_tblPracticeGPDataGridView.Rows[e.RowIndex].Cells["dataGridViewTextBoxColumn1"].Value = GetNextPracticeGPNo();
            }
        }

        private void p2430705_tblPracticeGPDataGridView_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            //Calculate the total number of days

            Int32 Counter;
            Int32 TotalDays=0;

            //traverse the rows in the datag grid view for days in the rows and keep adding the days to get the total
            for (Counter = 0; Counter < (p2430705_tblPracticeGPDataGridView.Rows.Count - 1) ; Counter++)
            {
                Int32 Days = 0;
                //check the daysperweek cell value is not null
                if(p2430705_tblPracticeGPDataGridView.Rows[Counter].Cells["dataGridViewTextBoxColumn4"].Value != null)
                {
                    //check there is a string of certain length
                    if(p2430705_tblPracticeGPDataGridView.Rows[Counter].Cells["dataGridViewTextBoxColumn4"].Value.ToString().Length != 0)
                    {
                        //get the days from the cell
                        Days = int.Parse(p2430705_tblPracticeGPDataGridView.Rows[Counter].Cells["dataGridViewTextBoxColumn4"].Value.ToString());
                    }

                }
                TotalDays = TotalDays + Days;
               
            }
            if(TotalDays > 7)
            {
                //if the user enters more than 7 days for the week then display an error (cannot have more than 7 days a week)
                MessageBox.Show("You have breached the 7 day week limit. Please check your days", "Days Limit Breached", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
            //finaly if there are any days display them
            if (TotalDays != 0)
            {
                //put the total days worked in a week as a string in to the textbox to be displayed
                lblTotalDays.Text = TotalDays.ToString();
            }
        }

        private void txtTotalDays_Enter(object sender, EventArgs e)
        {
            
        }

        private void lblTotalDays_Click(object sender, EventArgs e)
        {
            //calling the event handler will calculate the total days in the week for the table when the textbox is entered
            p2430705_tblPracticeGPDataGridView_CellValueChanged(null, null);
        }

        private void lblTotalDays_MouseHover(object sender, EventArgs e)
        {
            //calling the event handler will calculate the total days in the week for the table when the textbox is entered
            p2430705_tblPracticeGPDataGridView_CellValueChanged(null, null);
        }
    }
}
